}
# Плотность распределения св cos(theta) (при отклонении)
p_cos_theta <- function(layer, theta) {
if (data$g[layer] != 0) {
u <- (( 1 + data$g[layer]^2 - ((1 - data$g[layer]^2) / (1 - data$g[layer] + 2*data$g[layer]*theta))^2) / (2*data$g[layer]))
} else {
2 * theta - 1
}
if (is.na(acos(u))) {
return(1)
}
return(acos(u))
}
# Генерация новых координат
new_coordinate <- function(layer, photon, V) {
# Генерация пробега фотона
dist <- rexp(1, data$mu_a[layer] + data$mu_s[layer])
# Начальное погружение
if (all(photon == c(0,0,0))) {
return(list(c(0,0,dist), c(0,0,1)))
}
# Генерация углов отклонения траектории
theta <- p_cos_theta(layer, runif(1))
phi <- runif(1,0,2*pi)
V <- V / sqrt(sum(V^2))         # нормирование направляющего вектора
if (abs(V[3]) != 1) {
Vx = V[1]*cos(theta) + sin(theta) / sqrt(1-V[3]^2) * (V[1]*V[3]*cos(phi)-V[2]*sin(phi))
Vy = V[2]*cos(theta) + sin(theta) / sqrt(1-V[3]^2) * (V[2]*V[3]*cos(phi)+V[1]*sin(phi))
Vz = V[3]*cos(theta) - sin(theta)*cos(phi)*sqrt(1-V[3]^2)
} else {
Vx = sin(theta) * cos(phi)
Vy = sin(theta) * sin(phi)
Vz = V[3]*cos(theta)
}
# Высчитывание новых координат
x = photon[1] + Vx * dist
y = photon[2] + Vy * dist
z = photon[3] + Vz * dist
return(list(c(x,y,z), c(Vx,Vy,Vz)))
}
# Определение слоя
layer_definition <- function(dist){
layer = 0
if (dist < 0) {
layer = -1
} else if (dist < data$d[1]) {
layer = 1
} else if (dist < data$d[1] + data$d[2]) {
layer = 2
} else if (dist < data$d[1] + data$d[2] + data$d[1]) {
layer = 3
} else if (dist < data$d[1] + data$d[2] + data$d[3] + data$d[4]) {
layer = 4
} else if (dist < data$d[1] + data$d[2] + data$d[3] + data$d[4] + data$d[5]) {
layer = 5
} else {
layer = 0
}
return(layer)
}
# Моделирование траекторий движения фотонов
for (i in 1:N) {
layer <- 1               # начальный слой
W <- 1                   # начальный статистический вес
Wlost <- 0               # потерянный вес
photon <- c(0,0,0)       # начальные координаты
# Направляющий вектор
vector <- c(0,0,1)
# Запоминание координат для отображения пути фотона
x <- c(0)
y <- c(0)
z <- c(0)
while(TRUE) {
# Перемещение фотона
result <- new_coordinate(layer, photon, vector)
photon <- result[[1]]
vector <- result[[2]]
# Определение текущего слоя
layer <- layer_definition(photon[3])
if (layer == -1 || layer == 0) {
# Добавление координат и поглащенного веса
weight <<- cbind(weight, c(photon[1], photon[2], photon[3], W+Wlost))
# Добавление пути текущего фотона
paths[i] <- list(list(x,y,z))
if (layer == -1) {
# Подсчет отраженных фотонов
No <- No + 1
} else {
# Подсчет фотонов, прошедших через ткань
Np <- Np + 1
}
break;
}
# Проверка, что фотон находится в неоднородности
dist <- sqrt(sum((photon - c(0,0,l))^2))
if (dist <= r) {
layer = 6
}
# Генерация дальнейшего действия над фотоном
if (runif(1,0,1) < Pa(layer)) {
# Добавление координат и поглащенного веса
weight <<- cbind(weight, c(photon[1], photon[2], photon[3], W+Wlost))
# Добавление пути текущего фотона
paths[i] <- list(list(x,y,z))
break;
}
# Уменьшение статистического веса
W <- W - W*(data$mu_a[layer] / (data$mu_a[layer] + data$mu_s[layer]))
Wlost <- Wlost + W*(data$mu_a[layer] / (data$mu_a[layer] + data$mu_s[layer]))
# Сравнение веса с пороговым
if(W < W_lim) {
if(runif(1,0,1) < 1/m) {
# Добавление координат и поглащенного веса
weight <<- cbind(weight, c(photon[1], photon[2], photon[3], W+Wlost))
# Добавление пути текущего фотона
paths[i] <- list(list(x,y,z))
break;
}
W = W * m
}
# Добавление координат в путь фотона
x <- c(x, photon[1])
y <- c(y, photon[2])
z <- c(z, photon[3])
}
}
# Выделение области рассмотрения
x1 <- -0.01    # min(weight[1,])
x2 <- 0.01     # max(weight[1,])
dist_x <- x2 - x1                                       # размах по X
z1 <- 0        # min(weight[1,])
z2 <- 0.05     # max(weight[1,])
dist_z <- z2 - z1                                       # размах по Z
y1 <- min(weight[2, weight[1,] >= x1 & weight[1,] <= x2 & weight[3,] >= z1 & weight[3,] <= z2])
y2 <- max(weight[2, weight[1,] >= x1 & weight[1,] <= x2 & weight[3,] >= z1 & weight[3,] <= z2])
V <- (x2 - x1) * (z2 - z1) * (y2 - y1)                  # объём области
# Инициализация матрицы
countZ = 100
countX = as.integer(dist_x * 100 / dist_z)
absorbed_energy <- matrix(0, nrow = countZ, ncol = countZ)
# Подсчёт энергии
for (i in 1:ncol(weight)) {
x <- weight[1,i]
z <- weight[3,i]
W <- weight[4,i]
if (x >= x1 && x <= x2 && z >= z1 && z <= z2) {
# Вычисление индекса элемента в массиве absorbed_energy для плоскости xz
x_index <- as.integer((x - x1) / dist_x * countX + (countZ - countX) / 2)
z_index <- as.integer((z - z1) / dist_z * countZ)
# Вычисление поглощенной энергии
absorbed_energy[x_index, z_index] <- absorbed_energy[x_index, z_index] + W
}
}
# Построение графика распределения поглощенной энергии в плоскости xz
image(absorbed_energy, col = gray.colors(200, start=0, end=1), xlab = "X", ylab = "Z")
# Расчёт поглащённой энергии
q <- sum(weight[4,])
# Поглащенная энергия в рассматриваемой области
Q <- sum(absorbed_energy) * q / V
cat("Коэффициент пропускания: ", Np/N, "\n")
cat("Коэффициент отражения: ", No/N, "\n")
cat("Общая выделенная энергия на участке: ", q, "\n")
draw_model()
draw_model()
draw_model <- function() {
library(rgl)
open3d()
# Отрисовка координат
axes3d(labels = c("X", "Y", "Z"))
# Отрисовка слоев
x <- c(-0.1, 0.1, 0.1, -0.1)
y <- c(-0.1, -0.1, 0.1, 0.1)
z <- 0
quads3d(x=x, y=y, z=c(z,z,z,z), col="blue", alpha=0.5)
for (i in 1:(length(data$d)-1)) {
z <- z + data$d[i]
quads3d(x=x, y=y, z=c(z,z,z,z), col="blue", alpha=0.5)
}
# Отрисовка неоднородности
u <- seq(0, 2 * pi, length.out = 100)
v <- seq(0, pi, length.out = 50)
x <- 0 + r * outer(cos(u), sin(v))
y <- 0 + r * outer(sin(u), sin(v))
z <- l + r * outer(rep(1, length(u)), cos(v))
surface3d(x, y, z, color = "black", alpha = 0.3)
for (i in 1:N) {
lines3d(x=paths[[i]][[1]], y=paths[[i]][[2]], z=paths[[i]][[3]], col="red")
}
}
draw_model()
# Пункт 2.2
# Инициализация переменных
N <- 10000         # количество фотонов
Np <- 0           # количество фотонов, прошедших через ткань
No <- 0           # количество отраженных фотонов
W_lim <- 10^(-4)  # пороговое значение веса
m <- 10           # коэффициент нового веса
weight <- matrix(nrow=4, ncol=0)  # массив координат и поглощенного там веса
r <- 0.01         # радиус шара неоднородности
l <- 0.02         # глубина расположения шара неоднородности
paths <- list(list())  # список путей фотонов
data <- data.frame(
name <- c("Эпидермис", "Папиллярная дерма", "Поверхностное сосудистое сплетение",
"Ретикулярная дерма", "Глубокое сосудистое сплетение", "Неоднородность"),
mu_a <- c(32, 23, 40, 23, 46, 51),
mu_s <- c(165, 227, 246, 227, 253, 186),
g <- c(0.72, 0.72, 0.72, 0.72, 0.72, 0.8),
d <- c(0.01, 0.02, 0.02, 0.09, 0.06, 0)
)
# Вероятность поглащения
Pa <- function(layer) {
return(data$mu_a[layer] / (data$mu_a[layer] + data$mu_s[layer]))
}
# Плотность распределения св cos(theta) (при отклонении)
p_cos_theta <- function(layer, theta) {
if (data$g[layer] != 0) {
u <- (( 1 + data$g[layer]^2 - ((1 - data$g[layer]^2) / (1 - data$g[layer] + 2*data$g[layer]*theta))^2) / (2*data$g[layer]))
} else {
2 * theta - 1
}
if (is.na(acos(u))) {
return(1)
}
return(acos(u))
}
# Генерация новых координат
new_coordinate <- function(layer, photon, V) {
# Генерация пробега фотона
dist <- rexp(1, data$mu_a[layer] + data$mu_s[layer])
# Начальное погружение
if (all(photon == c(0,0,0))) {
return(list(c(0,0,dist), c(0,0,1)))
}
# Генерация углов отклонения траектории
theta <- p_cos_theta(layer, runif(1))
phi <- runif(1,0,2*pi)
V <- V / sqrt(sum(V^2))         # нормирование направляющего вектора
if (abs(V[3]) != 1) {
Vx = V[1]*cos(theta) + sin(theta) / sqrt(1-V[3]^2) * (V[1]*V[3]*cos(phi)-V[2]*sin(phi))
Vy = V[2]*cos(theta) + sin(theta) / sqrt(1-V[3]^2) * (V[2]*V[3]*cos(phi)+V[1]*sin(phi))
Vz = V[3]*cos(theta) - sin(theta)*cos(phi)*sqrt(1-V[3]^2)
} else {
Vx = sin(theta) * cos(phi)
Vy = sin(theta) * sin(phi)
Vz = V[3]*cos(theta)
}
# Высчитывание новых координат
x = photon[1] + Vx * dist
y = photon[2] + Vy * dist
z = photon[3] + Vz * dist
return(list(c(x,y,z), c(Vx,Vy,Vz)))
}
# Определение слоя
layer_definition <- function(dist){
layer = 0
if (dist < 0) {
layer = -1
} else if (dist < data$d[1]) {
layer = 1
} else if (dist < data$d[1] + data$d[2]) {
layer = 2
} else if (dist < data$d[1] + data$d[2] + data$d[1]) {
layer = 3
} else if (dist < data$d[1] + data$d[2] + data$d[3] + data$d[4]) {
layer = 4
} else if (dist < data$d[1] + data$d[2] + data$d[3] + data$d[4] + data$d[5]) {
layer = 5
} else {
layer = 0
}
return(layer)
}
# Моделирование траекторий движения фотонов
for (i in 1:N) {
layer <- 1               # начальный слой
W <- 1                   # начальный статистический вес
Wlost <- 0               # потерянный вес
photon <- c(0,0,0)       # начальные координаты
# Направляющий вектор
vector <- c(0,0,1)
# Запоминание координат для отображения пути фотона
x <- c(0)
y <- c(0)
z <- c(0)
while(TRUE) {
# Перемещение фотона
result <- new_coordinate(layer, photon, vector)
photon <- result[[1]]
vector <- result[[2]]
# Определение текущего слоя
layer <- layer_definition(photon[3])
if (layer == -1 || layer == 0) {
# Добавление координат и поглащенного веса
weight <<- cbind(weight, c(photon[1], photon[2], photon[3], W+Wlost))
# Добавление пути текущего фотона
paths[i] <- list(list(x,y,z))
if (layer == -1) {
# Подсчет отраженных фотонов
No <- No + 1
} else {
# Подсчет фотонов, прошедших через ткань
Np <- Np + 1
}
break;
}
# Проверка, что фотон находится в неоднородности
dist <- sqrt(sum((photon - c(0,0,l))^2))
if (dist <= r) {
layer = 6
}
# Генерация дальнейшего действия над фотоном
if (runif(1,0,1) < Pa(layer)) {
# Добавление координат и поглащенного веса
weight <<- cbind(weight, c(photon[1], photon[2], photon[3], W+Wlost))
# Добавление пути текущего фотона
paths[i] <- list(list(x,y,z))
break;
}
# Уменьшение статистического веса
W <- W - W*(data$mu_a[layer] / (data$mu_a[layer] + data$mu_s[layer]))
Wlost <- Wlost + W*(data$mu_a[layer] / (data$mu_a[layer] + data$mu_s[layer]))
# Сравнение веса с пороговым
if(W < W_lim) {
if(runif(1,0,1) < 1/m) {
# Добавление координат и поглащенного веса
weight <<- cbind(weight, c(photon[1], photon[2], photon[3], W+Wlost))
# Добавление пути текущего фотона
paths[i] <- list(list(x,y,z))
break;
}
W = W * m
}
# Добавление координат в путь фотона
x <- c(x, photon[1])
y <- c(y, photon[2])
z <- c(z, photon[3])
}
}
# Выделение области рассмотрения
x1 <- -0.01    # min(weight[1,])
x2 <- 0.01     # max(weight[1,])
dist_x <- x2 - x1                                       # размах по X
z1 <- 0        # min(weight[1,])
z2 <- 0.05     # max(weight[1,])
dist_z <- z2 - z1                                       # размах по Z
y1 <- min(weight[2, weight[1,] >= x1 & weight[1,] <= x2 & weight[3,] >= z1 & weight[3,] <= z2])
y2 <- max(weight[2, weight[1,] >= x1 & weight[1,] <= x2 & weight[3,] >= z1 & weight[3,] <= z2])
V <- (x2 - x1) * (z2 - z1) * (y2 - y1)                  # объём области
# Инициализация матрицы
countZ = 100
countX = as.integer(dist_x * 100 / dist_z)
absorbed_energy <- matrix(0, nrow = countZ, ncol = countZ)
# Подсчёт энергии
for (i in 1:ncol(weight)) {
x <- weight[1,i]
z <- weight[3,i]
W <- weight[4,i]
if (x >= x1 && x <= x2 && z >= z1 && z <= z2) {
# Вычисление индекса элемента в массиве absorbed_energy для плоскости xz
x_index <- as.integer((x - x1) / dist_x * countX + (countZ - countX) / 2)
z_index <- as.integer((z - z1) / dist_z * countZ)
# Вычисление поглощенной энергии
absorbed_energy[x_index, z_index] <- absorbed_energy[x_index, z_index] + W
}
}
# Построение графика распределения поглощенной энергии в плоскости xz
image(absorbed_energy, col = gray.colors(200, start=0, end=1), xlab = "X", ylab = "Z")
# Расчёт поглащённой энергии
q <- sum(weight[4,])
# Поглащенная энергия в рассматриваемой области
Q <- sum(absorbed_energy) * q / V
cat("Коэффициент пропускания: ", Np/N, "\n")
cat("Коэффициент отражения: ", No/N, "\n")
cat("Общая выделенная энергия на участке: ", q, "\n")
# Пункт 3.1
# Загрузка данных
data <- scan("time_series.dat")
# Пункт 3.1
# Загрузка данных
data <- scan("time_series.dat")
setwd("D:/ИмитМод/Lab3/")
M <- read.csv2("time_series.dat", header=TRUE, sep=" ", dec = ",", fileEncoding = "UTF-8")
M <- read.csv2("time_series.dat", header=TRUE, sep=",", dec = ",", fileEncoding = "UTF-8")
View(M)
M <- read.csv2("time_series.dat", header=TRUE, sep=",", dec = " ", fileEncoding = "UTF-8")
View(M)
M <- read.csv2("time_series.dat", header=TRUE, sep=" ", fileEncoding = "UTF-8")
M <- read.csv2("time_series.dat", header=TRUE, sep="\t", fileEncoding = "UTF-8")
View(M)
M <- read.csv2("time_series.dat", header=TRUE, sep="  ", fileEncoding = "UTF-8")
M <- read.csv2("time_series.dat", header=TRUE, sep="   ", fileEncoding = "UTF-8")
M <- read.csv2("time_series.dat", header=TRUE, sep="  ", fileEncoding = "UTF-8")
View(M)
M <- read.csv2("time_series.dat", header=TRUE, sep="    ", fileEncoding = "UTF-8")
M <- read.csv2("time_series.dat", header=TRUE, sep=" ", fileEncoding = "UTF-8")
M <- read.csv2("time_series.dat", header=TRUE, sep="\t", fileEncoding = "UTF-8")
setwd("D:/ИмитМод/Lab3/")
M <- read.csv2("time_series.dat", header=TRUE, sep=" ", fileEncoding = "UTF-8")
View(M)
setwd("D:/ИмитМод/Lab3/")
M <- read.csv2("time_series.dat", header=TRUE, sep="\t", fileEncoding = "UTF-8")
View(M)
setwd("D:/ИмитМод/Lab3/")
M <- read.csv2("time_series.dat", header=TRUE, sep=",", fileEncoding = "UTF-8")
View(M)
theta <- 1
lambda <- 1
k <- 2
b1 <- 1
b2 <- 1
# Количество наблюдений
n <- length(data)
# Функция для генерации обратного гамма-распределения
rinvgamma <- function(alpha, beta) {
return(1/rgamma(1, alpha, beta))
}
# Цикл Гиббса
n_iter <- 1000
samples <- matrix(NA, nrow = n_iter, ncol = 5)
for (iter in 1:n_iter) {
# Генерация theta из полного условного распределения
theta <- rgamma(1, sum(data[1:k]), b1)
# Генерация lambda из полного условного распределения
lambda <- rgamma(1, sum(data[(k+1):n]), b2)
# Генерация k из полного условного распределения с помощью алгоритма Метрополиса-Гастингса
k_proposed <- sample(2:(n-1), 1)
acceptance_prob <- min(1, sum(dpois(data[1:k_proposed], lambda, log = TRUE)) + sum(dpois(data[(k_proposed+1):n], theta, log = TRUE)) -
sum(dpois(data[1:k], lambda, log = TRUE)) - sum(dpois(data[(k+1):n], theta, log = TRUE)))
if (runif(1) < acceptance_prob) {
k <- k_proposed
}
# Генерация b1 и b2 из обратного гамма-распределения
b1 <- rinvgamma(0.5, theta)
b2 <- rinvgamma(0.5, lambda)
samples[iter, ] <- c(theta, lambda, k, b1, b2)
}
data[1:k]
data
# Загрузка данных
setwd("D:/ИмитМод/Lab3/")
data <- read.csv2("time_series.dat", header=TRUE, sep=",", fileEncoding = "UTF-8")
# Инициализация параметров
theta <- 1
lambda <- 1
k <- 2
b1 <- 1
b2 <- 1
# Количество наблюдений
n <- length(data)
# Функция для генерации обратного гамма-распределения
rinvgamma <- function(alpha, beta) {
return(1/rgamma(1, alpha, beta))
}
# Цикл Гиббса
n_iter <- 1000
samples <- matrix(NA, nrow = n_iter, ncol = 5)
for (iter in 1:n_iter) {
# Генерация theta из полного условного распределения
theta <- rgamma(1, sum(data[1:k]), b1)
# Генерация lambda из полного условного распределения
lambda <- rgamma(1, sum(data[(k+1):n]), b2)
# Генерация k из полного условного распределения с помощью алгоритма Метрополиса-Гастингса
k_proposed <- sample(2:(n-1), 1)
acceptance_prob <- min(1, sum(dpois(data[1:k_proposed], lambda, log = TRUE)) + sum(dpois(data[(k_proposed+1):n], theta, log = TRUE)) -
sum(dpois(data[1:k], lambda, log = TRUE)) - sum(dpois(data[(k+1):n], theta, log = TRUE)))
if (runif(1) < acceptance_prob) {
k <- k_proposed
}
# Генерация b1 и b2 из обратного гамма-распределения
b1 <- rinvgamma(0.5, theta)
b2 <- rinvgamma(0.5, lambda)
samples[iter, ] <- c(theta, lambda, k, b1, b2)
}
dpois(data[(k+1):n]
# Пункт 3.1
# Загрузка данных
setwd("D:/ИмитМод/Lab3/")
# Пункт 3.1
# Загрузка данных
setwd("D:/ИмитМод/Lab3/")
data <- read.csv2("time_series.dat", header=TRUE, sep=",", fileEncoding = "UTF-8")
# Инициализация параметров
theta <- 1
lambda <- 1
k <- 2
b1 <- 1
b2 <- 1
# Количество наблюдений
n <- length(data)
# Функция для генерации обратного гамма-распределения
rinvgamma <- function(alpha, beta) {
return(1/rgamma(1, alpha, beta))
}
n_iter <- 1000
samples <- matrix(NA, nrow = n_iter, ncol = 5)
for (iter in 1:n_iter) {
# Генерация theta из полного условного распределения
theta <- rgamma(1, sum(data[1:k]), b1)
# Генерация lambda из полного условного распределения
lambda <- rgamma(1, sum(data[(k+1):n]), b2)
# Генерация k из полного условного распределения с помощью алгоритма Метрополиса-Гастингса
k_proposed <- sample(2:(n-1), 1)
acceptance_prob <- min(1, sum(dpois(data[1:k_proposed], lambda, log = TRUE)) + sum(dpois(data[(k_proposed+1):n], theta, log = TRUE)) -
sum(dpois(data[1:k], lambda, log = TRUE)) - sum(dpois(data[(k+1):n], theta, log = TRUE)))
if (runif(1) < acceptance_prob) {
k <- k_proposed
}
# Генерация b1 и b2 из обратного гамма-распределения
b1 <- rinvgamma(0.5, theta)
b2 <- rinvgamma(0.5, lambda)
samples[iter, ] <- c(theta, lambda, k, b1, b2)
}
